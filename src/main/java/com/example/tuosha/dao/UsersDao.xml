<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="import com.example.tuosha.dao.UsersDao">

	<!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="com.example.tuosha.model.UsersEntity" id="usersMap">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="password" column="password"/>
        <result property="mobile" column="mobile"/>
        <result property="header" column="header"/>
        <result property="shareImage" column="share_image"/>
        <result property="scale" column="scale"/>
        <result property="nickname" column="nickname"/>
        <result property="openid" column="openid"/>
        <result property="level" column="level"/>
        <result property="status" column="status"/>
        <result property="parentId" column="parent_id"/>
        <result property="member" column="member"/>
        <result property="memberBuyTime" column="member_buy_time"/>
        <result property="money" column="money"/>
        <result property="moneyAll" column="money_all"/>
        <result property="rememberToken" column="remember_token"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>
    
  <sql id="Base_Column_List" > 
  	  	     id ,  	        
  	  	     name ,  	        
  	  	     email ,  	        
  	  	     password ,  	        
  	  	     mobile ,  	        
  	  	     header ,  	        
  	  	      share_image as shareImage  ,  	        
  	  	     scale ,  	        
  	  	     nickname ,  	        
  	  	     openid ,  	        
  	  	     level ,  	        
  	  	     status ,  	        
  	  	      parent_id as parentId  ,  	        
  	  	     member ,  	        
  	  	      member_buy_time as memberBuyTime  ,  	        
  	  	     money ,  	        
  	  	      money_all as moneyAll  ,  	        
  	  	      remember_token as rememberToken  ,  	        
  	  	      created_at as createdAt  ,  	        
  	  	      updated_at as updatedAt    	        
  	  
  </sql>

	<select id="queryObject" resultType="com.example.tuosha.model.UsersEntity">
		select  <include refid="Base_Column_List" />  from users where id = #{value}
	</select>

	<select id="queryList" resultType="com.example.tuosha.model.UsersEntity">
		select  <include refid="Base_Column_List" />  from users
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
			<otherwise>
                order by id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="queryTotal" resultType="int">
		select count(*) from users 
	</select>
	 
	<insert id="save" parameterType="com.example.tuosha.model.UsersEntity" useGeneratedKeys="true" keyProperty="id">
		insert into users
		(
			`name`, 
			`email`, 
			`password`, 
			`mobile`, 
			`header`, 
			`share_image`, 
			`scale`, 
			`nickname`, 
			`openid`, 
			`level`, 
			`status`, 
			`parent_id`, 
			`member`, 
			`member_buy_time`, 
			`money`, 
			`money_all`, 
			`remember_token`, 
			`created_at`, 
			`updated_at`
		)
		values
		(
			#{name}, 
			#{email}, 
			#{password}, 
			#{mobile}, 
			#{header}, 
			#{shareImage}, 
			#{scale}, 
			#{nickname}, 
			#{openid}, 
			#{level}, 
			#{status}, 
			#{parentId}, 
			#{member}, 
			#{memberBuyTime}, 
			#{money}, 
			#{moneyAll}, 
			#{rememberToken}, 
			#{createdAt}, 
			#{updatedAt}
		)
	</insert>
	 
	<update id="update" parameterType="com.example.tuosha.model.UsersEntity">
		update users 
		<set>
			<if test="name != null">`name` = #{name}, </if>
			<if test="email != null">`email` = #{email}, </if>
			<if test="password != null">`password` = #{password}, </if>
			<if test="mobile != null">`mobile` = #{mobile}, </if>
			<if test="header != null">`header` = #{header}, </if>
			<if test="shareImage != null">`share_image` = #{shareImage}, </if>
			<if test="scale != null">`scale` = #{scale}, </if>
			<if test="nickname != null">`nickname` = #{nickname}, </if>
			<if test="openid != null">`openid` = #{openid}, </if>
			<if test="level != null">`level` = #{level}, </if>
			<if test="status != null">`status` = #{status}, </if>
			<if test="parentId != null">`parent_id` = #{parentId}, </if>
			<if test="member != null">`member` = #{member}, </if>
			<if test="memberBuyTime != null">`member_buy_time` = #{memberBuyTime}, </if>
			<if test="money != null">`money` = #{money}, </if>
			<if test="moneyAll != null">`money_all` = #{moneyAll}, </if>
			<if test="rememberToken != null">`remember_token` = #{rememberToken}, </if>
			<if test="createdAt != null">`created_at` = #{createdAt}, </if>
			<if test="updatedAt != null">`updated_at` = #{updatedAt}</if>
		</set>
		where id = #{id}
	</update>
	
	<delete id="delete">
		delete from users where id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from users where id in 
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

</mapper>